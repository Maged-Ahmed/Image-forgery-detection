
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from skimage.feature import local_binary_pattern\n",
    "import pywt\n",
    "import os\n",
    "from sklearn import svm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.svm import SVC\n",
    "import random\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import pickle\n",
    "from sklearn import preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "P = 8\n",
    "R = 1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def feature_sub_channel(sub_channel):\n",
    "    coeffs = pywt.dwt2(sub_channel, 'haar')\n",
    "    cA, (cH, cV, cD) = coeffs\n",
    "    #     print(\"cA shape: \",cA.shape)\n",
    "    lbp_cA = local_binary_pattern(cA, P, R, method='default')\n",
    "    #     print(\"ulbp_cA shape: \",lbp_cA.shape)\n",
    "    lbp_cH = local_binary_pattern(cH, P, R, method='default')\n",
    "    #     print(\"lbp_cH shape: \",lbp_cH.shape)\n",
    "    lbp_cV = local_binary_pattern(cV, P, R, method='default')\n",
    "    lbp_cD = local_binary_pattern(cD, P, R, method='default')\n",
    "\n",
    "    lbp_cA_hist, bin_edges = np.histogram(lbp_cA, bins=256, range=(0, 255))\n",
    "    #     print(\"lbp_cA_hist shape is: \",lbp_cA_hist.shape)\n",
    "    lbp_cH_hist, bin_edges = np.histogram(lbp_cH, bins=256, range=(0, 255))\n",
    "    lbp_cV_hist, bin_edges = np.histogram(lbp_cV, bins=256, range=(0, 255))\n",
    "    lbp_cD_hist, bin_edges = np.histogram(lbp_cD, bins=256, range=(0, 255))\n",
    "\n",
    "    feature = np.concatenate([lbp_cA_hist, lbp_cH_hist, lbp_cV_hist, lbp_cD_hist])\n",
    "    #     print(\"final_feature shape: \",feature.shape)\n",
    "\n",
    "    return feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def feature_extraction(path_to_folder, class_label):\n",
    "    data_list = []\n",
    "    count = 0\n",
    "    for file_name in os.listdir(path_to_folder):\n",
    "        if (count != 0 and count % 300 == 0):\n",
    "            print(\"No. of images done: \", count)\n",
    "        path_to_img = os.path.join(path_to_folder, file_name)\n",
    "        img = cv2.imread(path_to_img)\n",
    "\n",
    "        if np.shape(img) == ():\n",
    "            continue\n",
    "\n",
    "        img = cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)  # changing to YCrCb color space.\n",
    "        img_cr = img[:, :, 1]  # the Cr channel only.\n",
    "\n",
    "        Fcr = feature_sub_channel(img_cr)\n",
    "\n",
    "        final_feature = list(Fcr)\n",
    "        # final_feature.insert(0, file_name)\n",
    "        # final_feature.insert(1, class_label)\n",
    "\n",
    "        data_list.append(final_feature)\n",
    "\n",
    "        count += 1\n",
    "\n",
    "    return (data_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of images done:  300\n",
      "No. of images done:  600\n",
      "No. of images done:  900\n",
      "No. of images done:  1200\n",
      "No. of images done:  1500\n",
      "No. of images done:  1800\n",
      "No. of images done:  2100\n",
      "No. of images done:  2400\n",
      "No. of images done:  2700\n",
      "No. of images done:  3000\n",
      "No. of images done:  3300\n",
      "No. of images done:  3600\n",
      "No. of images done:  3900\n",
      "No. of images done:  4200\n",
      "No. of images done:  4500\n",
      "No. of images done:  4800\n",
      "No. of images done:  5100\n",
      "No. of images done:  5400\n",
      "No. of images done:  5700\n",
      "No. of images done:  6000\n",
      "No. of images done:  6300\n",
      "No. of images done:  6600\n",
      "No. of images done:  6900\n",
      "No. of images done:  7200\n",
      "No. of images done:  7500\n",
      "No. of images done:  7800\n",
      "No. of images done:  8100\n",
      "No. of images done:  8400\n",
      "No. of images done:  8700\n",
      "No. of images done:  9000\n",
      "No. of images done:  9300\n",
      "No. of images done:  9600\n",
      "No. of images done:  9900\n",
      "No. of images done:  10200\n",
      "No. of images done:  10500\n",
      "No. of images done:  10800\n",
      "No. of images done:  11100\n",
      "No. of images done:  11400\n",
      "No. of images done:  11700\n",
      "No. of images done:  12000\n",
      "No. of images done:  12300\n",
      "No. of images done:  12600\n",
      "No. of images done:  12900\n",
      "No. of images done:  13200\n",
      "No. of images done:  13500\n",
      "No. of images done:  13800\n",
      "No. of images done:  14100\n",
      "No. of images done:  14400\n",
      "No. of images done:  14700\n",
      "No. of images done:  15000\n",
      "No. of images done:  15300\n",
      "No. of images done:  15600\n",
      "No. of images done:  15900\n",
      "No. of images done:  16200\n",
      "No. of images done:  16500\n",
      "No. of images done:  16800\n",
      "No. of images done:  17100\n",
      "No. of images done:  17400\n",
      "No. of images done:  17700\n",
      "No. of images done:  18000\n",
      "No. of images done:  18300\n",
      "No. of images done:  18600\n",
      "No. of images done:  18900\n",
      "No. of images done:  19200\n",
      "No. of images done:  19500\n",
      "No. of images done:  19800\n",
      "No. of images done:  20100\n",
      "No. of images done:  20400\n",
      "No. of images done:  20700\n",
      "No. of images done:  21000\n",
      "No. of images done:  21300\n",
      "No. of images done:  21600\n",
      "No. of images done:  21900\n",
      "No. of images done:  22200\n",
      "No. of images done:  22500\n",
      "No. of images done:  22800\n",
      "No. of images done:  23100\n",
      "No. of images done:  23400\n",
      "No. of images done:  23700\n",
      "No. of images done:  24000\n",
      "No. of images done:  24300\n",
      "No. of images done:  24600\n",
      "No. of images done:  300\n",
      "No. of images done:  600\n",
      "No. of images done:  900\n",
      "No. of images done:  1200\n",
      "No. of images done:  1500\n",
      "No. of images done:  1800\n",
      "No. of images done:  2100\n",
      "No. of images done:  2400\n",
      "No. of images done:  2700\n",
      "No. of images done:  3000\n",
      "No. of images done:  3300\n",
      "No. of images done:  3600\n",
      "No. of images done:  3900\n",
      "No. of images done:  4200\n",
      "No. of images done:  4500\n",
      "No. of images done:  4800\n",
      "No. of images done:  5100\n",
      "No. of images done:  5400\n",
      "No. of images done:  5700\n",
      "No. of images done:  6000\n",
      "No. of images done:  6300\n",
      "No. of images done:  6600\n",
      "No. of images done:  6900\n",
      "No. of images done:  7200\n",
      "No. of images done:  7500\n",
      "No. of images done:  7800\n",
      "No. of images done:  8100\n",
      "No. of images done:  8400\n",
      "No. of images done:  8700\n",
      "No. of images done:  9000\n",
      "No. of images done:  9300\n",
      "No. of images done:  9600\n",
      "No. of images done:  9900\n",
      "No. of images done:  10200\n",
      "No. of images done:  10500\n",
      "No. of images done:  10800\n",
      "No. of images done:  11100\n",
      "No. of images done:  11400\n",
      "No. of images done:  11700\n",
      "No. of images done:  12000\n",
      "No. of images done:  12300\n",
      "No. of images done:  12600\n",
      "No. of images done:  12900\n",
      "No. of images done:  13200\n",
      "No. of images done:  13500\n",
      "No. of images done:  13800\n",
      "No. of images done:  14100\n",
      "No. of images done:  14400\n",
      "No. of images done:  14700\n",
      "No. of images done:  15000\n",
      "No. of images done:  15300\n",
      "No. of images done:  15600\n",
      "No. of images done:  15900\n",
      "No. of images done:  16200\n",
      "No. of images done:  16500\n",
      "No. of images done:  16800\n",
      "No. of images done:  17100\n",
      "No. of images done:  17400\n",
      "No. of images done:  17700\n",
      "No. of images done:  18000\n",
      "No. of images done:  18300\n",
      "No. of images done:  18600\n",
      "No. of images done:  18900\n",
      "No. of images done:  19200\n",
      "No. of images done:  19500\n",
      "No. of images done:  19800\n",
      "No. of images done:  20100\n",
      "No. of images done:  20400\n",
      "No. of images done:  20700\n",
      "No. of images done:  21000\n",
      "No. of images done:  21300\n",
      "No. of images done:  21600\n",
      "No. of images done:  21900\n",
      "No. of images done:  22200\n",
      "No. of images done:  22500\n",
      "No. of images done:  22800\n",
      "No. of images done:  23100\n",
      "No. of images done:  23400\n",
      "No. of images done:  23700\n",
      "No. of images done:  24000\n",
      "No. of images done:  24300\n",
      "No. of images done:  24600\n",
      "No. of images done:  24900\n",
      "No. of images done:  25200\n",
      "No. of images done:  25500\n",
      "No. of images done:  25800\n",
      "No. of images done:  26100\n",
      "No. of images done:  26400\n",
      "No. of images done:  26700\n",
      "No. of images done:  27000\n",
      "No. of images done:  27300\n",
      "No. of images done:  27600\n",
      "No. of images done:  27900\n",
      "No. of images done:  28200\n",
      "No. of images done:  28500\n",
      "No. of images done:  28800\n",
      "No. of images done:  29100\n",
      "No. of images done:  29400\n",
      "No. of images done:  29700\n",
      "No. of images done:  30000\n",
      "No. of images done:  30300\n",
      "No. of images done:  30600\n",
      "No. of images done:  30900\n",
      "No. of images done:  31200\n",
      "No. of images done:  31500\n",
      "No. of images done:  31800\n",
      "No. of images done:  32100\n",
      "No. of images done:  32400\n",
      "No. of images done:  32700\n",
      "No. of images done:  33000\n",
      "No. of images done:  33300\n",
      "No. of images done:  33600\n",
      "No. of images done:  33900\n",
      "No. of images done:  34200\n",
      "No. of images done:  34500\n",
      "No. of images done:  34800\n",
      "No. of images done:  35100\n",
      "No. of images done:  35400\n",
      "No. of images done:  35700\n",
      "No. of images done:  36000\n",
      "No. of images done:  36300\n",
      "No. of images done:  36600\n",
      "No. of images done:  36900\n",
      "No. of images done:  37200\n",
      "No. of images done:  37500\n",
      "No. of images done:  37800\n",
      "No. of images done:  38100\n",
      "No. of images done:  38400\n",
      "No. of images done:  38700\n",
      "No. of images done:  39000\n",
      "No. of images done:  39300\n",
      "No. of images done:  39600\n",
      "No. of images done:  39900\n",
      "No. of images done:  40200\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Maged Ahmed\\AppData\\Local\\Temp\\ipykernel_16740\\53972974.py:9: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  df = df.append(pd.DataFrame(data_list2), ignore_index=True)\n"
     ]
    }
   ],
   "source": [
    "au_path = \"E:/NU/fall 22/Grad project/datasets/MYDATASET AUTHENTIC\"\n",
    "tp_path1 = \"E:/NU/fall 22/Grad project/datasets/MYDATASET TAMPERED\"\n",
    "\n",
    "data_list1 = feature_extraction(au_path, 0)\n",
    "data_list2 = feature_extraction(tp_path1, 1)\n",
    "\n",
    "\n",
    "df = pd.DataFrame(data_list1)\n",
    "df = df.append(pd.DataFrame(data_list2), ignore_index=True)\n",
    "output_name='CASIA1_features.csv'\n",
    "df.to_csv(output_name, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df:               0         1         2         3         4         5         6  \\\n",
      "0      0.006167  0.011006  0.000903  0.008131  0.018998  0.010987  0.011917   \n",
      "1      0.010136  0.002649  0.006919  0.001906  0.014280  0.005959  0.004983   \n",
      "2      0.000953  0.000938  0.000000  0.000817  0.004498  0.000931  0.001878   \n",
      "3      0.005895  0.003821  0.004212  0.005913  0.014154  0.007263  0.009750   \n",
      "4      0.003099  0.002110  0.002708  0.003268  0.008367  0.000931  0.008017   \n",
      "...         ...       ...       ...       ...       ...       ...       ...   \n",
      "65133  0.002220  0.001969  0.001504  0.001712  0.003995  0.000372  0.003322   \n",
      "65134  0.002503  0.003141  0.003008  0.002334  0.005536  0.000745  0.004189   \n",
      "65135  0.018869  0.014605  0.012034  0.016417  0.025320  0.009125  0.023906   \n",
      "65136  0.001759  0.002110  0.001504  0.003073  0.004498  0.002607  0.003900   \n",
      "65137  0.000827  0.001524  0.000301  0.000973  0.002013  0.002607  0.001517   \n",
      "\n",
      "              7         8         9  ...      1014      1015      1016  \\\n",
      "0      0.039672  0.002861  0.002994  ...  0.011707  0.043848  0.010840   \n",
      "1      0.002169  0.007725  0.002994  ...  0.007175  0.007846  0.003097   \n",
      "2      0.011174  0.000572  0.000499  ...  0.003021  0.014543  0.000995   \n",
      "3      0.022770  0.004292  0.000998  ...  0.012085  0.027739  0.010065   \n",
      "4      0.006336  0.002575  0.001497  ...  0.008686  0.005726  0.005420   \n",
      "...         ...       ...       ...  ...       ...       ...       ...   \n",
      "65133  0.005415  0.000286  0.000499  ...  0.001511  0.004379  0.002655   \n",
      "65134  0.009692  0.000858  0.002495  ...  0.001511  0.005251  0.002655   \n",
      "65135  0.033960  0.013734  0.012475  ...  0.013595  0.030117  0.029643   \n",
      "65136  0.009426  0.001717  0.000499  ...  0.000000  0.003725  0.000221   \n",
      "65137  0.007912  0.000286  0.000499  ...  0.000378  0.001427  0.000221   \n",
      "\n",
      "           1017      1018      1019      1020      1021      1022      1023  \n",
      "0      0.027319  0.023526  0.021551  0.043898  0.042388  0.016167  0.027857  \n",
      "1      0.007102  0.007842  0.008673  0.005897  0.007768  0.004025  0.000903  \n",
      "2      0.004926  0.001882  0.003717  0.016762  0.014367  0.002024  0.019911  \n",
      "3      0.019258  0.016311  0.017966  0.028883  0.028655  0.010321  0.015849  \n",
      "4      0.005950  0.007215  0.007213  0.005460  0.005628  0.004070  0.000819  \n",
      "...         ...       ...       ...       ...       ...       ...       ...  \n",
      "65133  0.005438  0.000941  0.003761  0.003494  0.004816  0.001552  0.003524  \n",
      "65134  0.005502  0.003450  0.004071  0.004150  0.005529  0.001462  0.006925  \n",
      "65135  0.035189  0.015370  0.024029  0.030085  0.030815  0.015335  0.013382  \n",
      "65136  0.002367  0.000314  0.001372  0.001474  0.003944  0.000585  0.004022  \n",
      "65137  0.001088  0.000314  0.000620  0.000437  0.001407  0.000315  0.004330  \n",
      "\n",
      "[65138 rows x 1024 columns]\n",
      "dfshape: (65138, 1024)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1014</th>\n",
       "      <th>1015</th>\n",
       "      <th>1016</th>\n",
       "      <th>1017</th>\n",
       "      <th>1018</th>\n",
       "      <th>1019</th>\n",
       "      <th>1020</th>\n",
       "      <th>1021</th>\n",
       "      <th>1022</th>\n",
       "      <th>1023</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.006167</td>\n",
       "      <td>0.011006</td>\n",
       "      <td>0.000903</td>\n",
       "      <td>0.008131</td>\n",
       "      <td>0.018998</td>\n",
       "      <td>0.010987</td>\n",
       "      <td>0.011917</td>\n",
       "      <td>0.039672</td>\n",
       "      <td>0.002861</td>\n",
       "      <td>0.002994</td>\n",
       "      <td>...</td>\n",
       "      <td>0.011707</td>\n",
       "      <td>0.043848</td>\n",
       "      <td>0.010840</td>\n",
       "      <td>0.027319</td>\n",
       "      <td>0.023526</td>\n",
       "      <td>0.021551</td>\n",
       "      <td>0.043898</td>\n",
       "      <td>0.042388</td>\n",
       "      <td>0.016167</td>\n",
       "      <td>0.027857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.010136</td>\n",
       "      <td>0.002649</td>\n",
       "      <td>0.006919</td>\n",
       "      <td>0.001906</td>\n",
       "      <td>0.014280</td>\n",
       "      <td>0.005959</td>\n",
       "      <td>0.004983</td>\n",
       "      <td>0.002169</td>\n",
       "      <td>0.007725</td>\n",
       "      <td>0.002994</td>\n",
       "      <td>...</td>\n",
       "      <td>0.007175</td>\n",
       "      <td>0.007846</td>\n",
       "      <td>0.003097</td>\n",
       "      <td>0.007102</td>\n",
       "      <td>0.007842</td>\n",
       "      <td>0.008673</td>\n",
       "      <td>0.005897</td>\n",
       "      <td>0.007768</td>\n",
       "      <td>0.004025</td>\n",
       "      <td>0.000903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000953</td>\n",
       "      <td>0.000938</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000817</td>\n",
       "      <td>0.004498</td>\n",
       "      <td>0.000931</td>\n",
       "      <td>0.001878</td>\n",
       "      <td>0.011174</td>\n",
       "      <td>0.000572</td>\n",
       "      <td>0.000499</td>\n",
       "      <td>...</td>\n",
       "      <td>0.003021</td>\n",
       "      <td>0.014543</td>\n",
       "      <td>0.000995</td>\n",
       "      <td>0.004926</td>\n",
       "      <td>0.001882</td>\n",
       "      <td>0.003717</td>\n",
       "      <td>0.016762</td>\n",
       "      <td>0.014367</td>\n",
       "      <td>0.002024</td>\n",
       "      <td>0.019911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.005895</td>\n",
       "      <td>0.003821</td>\n",
       "      <td>0.004212</td>\n",
       "      <td>0.005913</td>\n",
       "      <td>0.014154</td>\n",
       "      <td>0.007263</td>\n",
       "      <td>0.009750</td>\n",
       "      <td>0.022770</td>\n",
       "      <td>0.004292</td>\n",
       "      <td>0.000998</td>\n",
       "      <td>...</td>\n",
       "      <td>0.012085</td>\n",
       "      <td>0.027739</td>\n",
       "      <td>0.010065</td>\n",
       "      <td>0.019258</td>\n",
       "      <td>0.016311</td>\n",
       "      <td>0.017966</td>\n",
       "      <td>0.028883</td>\n",
       "      <td>0.028655</td>\n",
       "      <td>0.010321</td>\n",
       "      <td>0.015849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.003099</td>\n",
       "      <td>0.002110</td>\n",
       "      <td>0.002708</td>\n",
       "      <td>0.003268</td>\n",
       "      <td>0.008367</td>\n",
       "      <td>0.000931</td>\n",
       "      <td>0.008017</td>\n",
       "      <td>0.006336</td>\n",
       "      <td>0.002575</td>\n",
       "      <td>0.001497</td>\n",
       "      <td>...</td>\n",
       "      <td>0.008686</td>\n",
       "      <td>0.005726</td>\n",
       "      <td>0.005420</td>\n",
       "      <td>0.005950</td>\n",
       "      <td>0.007215</td>\n",
       "      <td>0.007213</td>\n",
       "      <td>0.005460</td>\n",
       "      <td>0.005628</td>\n",
       "      <td>0.004070</td>\n",
       "      <td>0.000819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65133</th>\n",
       "      <td>0.002220</td>\n",
       "      <td>0.001969</td>\n",
       "      <td>0.001504</td>\n",
       "      <td>0.001712</td>\n",
       "      <td>0.003995</td>\n",
       "      <td>0.000372</td>\n",
       "      <td>0.003322</td>\n",
       "      <td>0.005415</td>\n",
       "      <td>0.000286</td>\n",
       "      <td>0.000499</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001511</td>\n",
       "      <td>0.004379</td>\n",
       "      <td>0.002655</td>\n",
       "      <td>0.005438</td>\n",
       "      <td>0.000941</td>\n",
       "      <td>0.003761</td>\n",
       "      <td>0.003494</td>\n",
       "      <td>0.004816</td>\n",
       "      <td>0.001552</td>\n",
       "      <td>0.003524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65134</th>\n",
       "      <td>0.002503</td>\n",
       "      <td>0.003141</td>\n",
       "      <td>0.003008</td>\n",
       "      <td>0.002334</td>\n",
       "      <td>0.005536</td>\n",
       "      <td>0.000745</td>\n",
       "      <td>0.004189</td>\n",
       "      <td>0.009692</td>\n",
       "      <td>0.000858</td>\n",
       "      <td>0.002495</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001511</td>\n",
       "      <td>0.005251</td>\n",
       "      <td>0.002655</td>\n",
       "      <td>0.005502</td>\n",
       "      <td>0.003450</td>\n",
       "      <td>0.004071</td>\n",
       "      <td>0.004150</td>\n",
       "      <td>0.005529</td>\n",
       "      <td>0.001462</td>\n",
       "      <td>0.006925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65135</th>\n",
       "      <td>0.018869</td>\n",
       "      <td>0.014605</td>\n",
       "      <td>0.012034</td>\n",
       "      <td>0.016417</td>\n",
       "      <td>0.025320</td>\n",
       "      <td>0.009125</td>\n",
       "      <td>0.023906</td>\n",
       "      <td>0.033960</td>\n",
       "      <td>0.013734</td>\n",
       "      <td>0.012475</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013595</td>\n",
       "      <td>0.030117</td>\n",
       "      <td>0.029643</td>\n",
       "      <td>0.035189</td>\n",
       "      <td>0.015370</td>\n",
       "      <td>0.024029</td>\n",
       "      <td>0.030085</td>\n",
       "      <td>0.030815</td>\n",
       "      <td>0.015335</td>\n",
       "      <td>0.013382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65136</th>\n",
       "      <td>0.001759</td>\n",
       "      <td>0.002110</td>\n",
       "      <td>0.001504</td>\n",
       "      <td>0.003073</td>\n",
       "      <td>0.004498</td>\n",
       "      <td>0.002607</td>\n",
       "      <td>0.003900</td>\n",
       "      <td>0.009426</td>\n",
       "      <td>0.001717</td>\n",
       "      <td>0.000499</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.003725</td>\n",
       "      <td>0.000221</td>\n",
       "      <td>0.002367</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>0.001372</td>\n",
       "      <td>0.001474</td>\n",
       "      <td>0.003944</td>\n",
       "      <td>0.000585</td>\n",
       "      <td>0.004022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65137</th>\n",
       "      <td>0.000827</td>\n",
       "      <td>0.001524</td>\n",
       "      <td>0.000301</td>\n",
       "      <td>0.000973</td>\n",
       "      <td>0.002013</td>\n",
       "      <td>0.002607</td>\n",
       "      <td>0.001517</td>\n",
       "      <td>0.007912</td>\n",
       "      <td>0.000286</td>\n",
       "      <td>0.000499</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000378</td>\n",
       "      <td>0.001427</td>\n",
       "      <td>0.000221</td>\n",
       "      <td>0.001088</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>0.000620</td>\n",
       "      <td>0.000437</td>\n",
       "      <td>0.001407</td>\n",
       "      <td>0.000315</td>\n",
       "      <td>0.004330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>65138 rows × 1024 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              0         1         2         3         4         5         6  \\\n",
       "0      0.006167  0.011006  0.000903  0.008131  0.018998  0.010987  0.011917   \n",
       "1      0.010136  0.002649  0.006919  0.001906  0.014280  0.005959  0.004983   \n",
       "2      0.000953  0.000938  0.000000  0.000817  0.004498  0.000931  0.001878   \n",
       "3      0.005895  0.003821  0.004212  0.005913  0.014154  0.007263  0.009750   \n",
       "4      0.003099  0.002110  0.002708  0.003268  0.008367  0.000931  0.008017   \n",
       "...         ...       ...       ...       ...       ...       ...       ...   \n",
       "65133  0.002220  0.001969  0.001504  0.001712  0.003995  0.000372  0.003322   \n",
       "65134  0.002503  0.003141  0.003008  0.002334  0.005536  0.000745  0.004189   \n",
       "65135  0.018869  0.014605  0.012034  0.016417  0.025320  0.009125  0.023906   \n",
       "65136  0.001759  0.002110  0.001504  0.003073  0.004498  0.002607  0.003900   \n",
       "65137  0.000827  0.001524  0.000301  0.000973  0.002013  0.002607  0.001517   \n",
       "\n",
       "              7         8         9  ...      1014      1015      1016  \\\n",
       "0      0.039672  0.002861  0.002994  ...  0.011707  0.043848  0.010840   \n",
       "1      0.002169  0.007725  0.002994  ...  0.007175  0.007846  0.003097   \n",
       "2      0.011174  0.000572  0.000499  ...  0.003021  0.014543  0.000995   \n",
       "3      0.022770  0.004292  0.000998  ...  0.012085  0.027739  0.010065   \n",
       "4      0.006336  0.002575  0.001497  ...  0.008686  0.005726  0.005420   \n",
       "...         ...       ...       ...  ...       ...       ...       ...   \n",
       "65133  0.005415  0.000286  0.000499  ...  0.001511  0.004379  0.002655   \n",
       "65134  0.009692  0.000858  0.002495  ...  0.001511  0.005251  0.002655   \n",
       "65135  0.033960  0.013734  0.012475  ...  0.013595  0.030117  0.029643   \n",
       "65136  0.009426  0.001717  0.000499  ...  0.000000  0.003725  0.000221   \n",
       "65137  0.007912  0.000286  0.000499  ...  0.000378  0.001427  0.000221   \n",
       "\n",
       "           1017      1018      1019      1020      1021      1022      1023  \n",
       "0      0.027319  0.023526  0.021551  0.043898  0.042388  0.016167  0.027857  \n",
       "1      0.007102  0.007842  0.008673  0.005897  0.007768  0.004025  0.000903  \n",
       "2      0.004926  0.001882  0.003717  0.016762  0.014367  0.002024  0.019911  \n",
       "3      0.019258  0.016311  0.017966  0.028883  0.028655  0.010321  0.015849  \n",
       "4      0.005950  0.007215  0.007213  0.005460  0.005628  0.004070  0.000819  \n",
       "...         ...       ...       ...       ...       ...       ...       ...  \n",
       "65133  0.005438  0.000941  0.003761  0.003494  0.004816  0.001552  0.003524  \n",
       "65134  0.005502  0.003450  0.004071  0.004150  0.005529  0.001462  0.006925  \n",
       "65135  0.035189  0.015370  0.024029  0.030085  0.030815  0.015335  0.013382  \n",
       "65136  0.002367  0.000314  0.001372  0.001474  0.003944  0.000585  0.004022  \n",
       "65137  0.001088  0.000314  0.000620  0.000437  0.001407  0.000315  0.004330  \n",
       "\n",
       "[65138 rows x 1024 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv('E:/NU/fall 22/Grad project/Dataset_features.csv')\n",
    "\n",
    "\n",
    "df.rename(columns={0: \"image_names\", 1: \"label\"}, inplace=True)\n",
    "\n",
    "scaler_norm = MinMaxScaler()\n",
    "df.iloc[:, :] = scaler_norm.fit_transform(df.iloc[:, :].to_numpy())  # Normalising the values in dataframe.\n",
    "print(\"df:\",df)\n",
    "print('dfshape:',df.shape)\n",
    "\n",
    "#trainset = df.drop(\"0\", axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "array=df.values\n",
    "x_feature=array[:,1:]\n",
    "y_label=array[:,0].astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,Y_train,Y_test=train_test_split(x_feature,y_label,test_size=0.20,random_state=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=1, gamma=1, kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=1, gamma=1, kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC(C=1, gamma=1, kernel='linear')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_SVC = svm.SVC(C=1,gamma=1, kernel='linear')\n",
    "model_SVC.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "[[13028]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     13028\n",
      "\n",
      "    accuracy                           1.00     13028\n",
      "   macro avg       1.00      1.00      1.00     13028\n",
      "weighted avg       1.00      1.00      1.00     13028\n",
      "\n"
     ]
    }
   ],
   "source": [
    "predictions=model_SVC.predict(X_test)\n",
    "\n",
    "print(accuracy_score(Y_test,predictions))\n",
    "print(confusion_matrix(Y_test,predictions))\n",
    "print(classification_report(Y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('my_trained_model.pkl', 'wb') as f:\n",
    "    pickle.dump(model_SVC, f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('my_trained_model.pkl', 'rb') as f:\n",
    "    trained_model = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_img_path = 'E:/NU/fall 22/Grad project/images'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of images done:  300\n",
      "No. of images done:  600\n",
      "No. of images done:  900\n",
      "No. of images done:  1200\n",
      "No. of images done:  1500\n",
      "No. of images done:  1800\n"
     ]
    }
   ],
   "source": [
    "data_list1 = feature_extraction(new_img_path, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf = pd.DataFrame(data_list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "output_name='Test_set_features.csv'\n",
    "ndf.to_csv(output_name, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf=pd.read_csv('E:/NU/fall 22/Grad project/Test_set_features.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1014</th>\n",
       "      <th>1015</th>\n",
       "      <th>1016</th>\n",
       "      <th>1017</th>\n",
       "      <th>1018</th>\n",
       "      <th>1019</th>\n",
       "      <th>1020</th>\n",
       "      <th>1021</th>\n",
       "      <th>1022</th>\n",
       "      <th>1023</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24858</td>\n",
       "      <td>19376</td>\n",
       "      <td>592</td>\n",
       "      <td>4982</td>\n",
       "      <td>8009</td>\n",
       "      <td>2129</td>\n",
       "      <td>3486</td>\n",
       "      <td>15243</td>\n",
       "      <td>655</td>\n",
       "      <td>247</td>\n",
       "      <td>...</td>\n",
       "      <td>487</td>\n",
       "      <td>20342</td>\n",
       "      <td>713</td>\n",
       "      <td>5285</td>\n",
       "      <td>572</td>\n",
       "      <td>5288</td>\n",
       "      <td>6678</td>\n",
       "      <td>20373</td>\n",
       "      <td>6990</td>\n",
       "      <td>299298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25176</td>\n",
       "      <td>19094</td>\n",
       "      <td>595</td>\n",
       "      <td>5324</td>\n",
       "      <td>8123</td>\n",
       "      <td>2192</td>\n",
       "      <td>3684</td>\n",
       "      <td>16480</td>\n",
       "      <td>699</td>\n",
       "      <td>271</td>\n",
       "      <td>...</td>\n",
       "      <td>527</td>\n",
       "      <td>20538</td>\n",
       "      <td>887</td>\n",
       "      <td>5613</td>\n",
       "      <td>665</td>\n",
       "      <td>5579</td>\n",
       "      <td>7089</td>\n",
       "      <td>20436</td>\n",
       "      <td>7570</td>\n",
       "      <td>262376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>27050</td>\n",
       "      <td>21081</td>\n",
       "      <td>622</td>\n",
       "      <td>4958</td>\n",
       "      <td>8840</td>\n",
       "      <td>2668</td>\n",
       "      <td>3725</td>\n",
       "      <td>16372</td>\n",
       "      <td>714</td>\n",
       "      <td>282</td>\n",
       "      <td>...</td>\n",
       "      <td>441</td>\n",
       "      <td>22485</td>\n",
       "      <td>617</td>\n",
       "      <td>5552</td>\n",
       "      <td>513</td>\n",
       "      <td>5161</td>\n",
       "      <td>7156</td>\n",
       "      <td>22299</td>\n",
       "      <td>6766</td>\n",
       "      <td>283445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26854</td>\n",
       "      <td>20821</td>\n",
       "      <td>630</td>\n",
       "      <td>5192</td>\n",
       "      <td>8702</td>\n",
       "      <td>2497</td>\n",
       "      <td>3779</td>\n",
       "      <td>16640</td>\n",
       "      <td>653</td>\n",
       "      <td>261</td>\n",
       "      <td>...</td>\n",
       "      <td>484</td>\n",
       "      <td>22241</td>\n",
       "      <td>645</td>\n",
       "      <td>5674</td>\n",
       "      <td>571</td>\n",
       "      <td>5305</td>\n",
       "      <td>7397</td>\n",
       "      <td>21911</td>\n",
       "      <td>7033</td>\n",
       "      <td>275671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>25124</td>\n",
       "      <td>18591</td>\n",
       "      <td>650</td>\n",
       "      <td>4735</td>\n",
       "      <td>8451</td>\n",
       "      <td>2303</td>\n",
       "      <td>3431</td>\n",
       "      <td>16051</td>\n",
       "      <td>703</td>\n",
       "      <td>222</td>\n",
       "      <td>...</td>\n",
       "      <td>469</td>\n",
       "      <td>20992</td>\n",
       "      <td>869</td>\n",
       "      <td>5382</td>\n",
       "      <td>638</td>\n",
       "      <td>5461</td>\n",
       "      <td>6853</td>\n",
       "      <td>20883</td>\n",
       "      <td>7065</td>\n",
       "      <td>286160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2088</th>\n",
       "      <td>178821</td>\n",
       "      <td>32849</td>\n",
       "      <td>6689</td>\n",
       "      <td>11983</td>\n",
       "      <td>38008</td>\n",
       "      <td>5235</td>\n",
       "      <td>11725</td>\n",
       "      <td>13240</td>\n",
       "      <td>6916</td>\n",
       "      <td>1873</td>\n",
       "      <td>...</td>\n",
       "      <td>3732</td>\n",
       "      <td>12846</td>\n",
       "      <td>3201</td>\n",
       "      <td>5315</td>\n",
       "      <td>5885</td>\n",
       "      <td>31547</td>\n",
       "      <td>5721</td>\n",
       "      <td>12310</td>\n",
       "      <td>29437</td>\n",
       "      <td>315314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2089</th>\n",
       "      <td>95603</td>\n",
       "      <td>13400</td>\n",
       "      <td>2963</td>\n",
       "      <td>12697</td>\n",
       "      <td>89420</td>\n",
       "      <td>4786</td>\n",
       "      <td>29025</td>\n",
       "      <td>54400</td>\n",
       "      <td>3017</td>\n",
       "      <td>359</td>\n",
       "      <td>...</td>\n",
       "      <td>334</td>\n",
       "      <td>89677</td>\n",
       "      <td>1216</td>\n",
       "      <td>22574</td>\n",
       "      <td>259</td>\n",
       "      <td>12417</td>\n",
       "      <td>11944</td>\n",
       "      <td>84611</td>\n",
       "      <td>4248</td>\n",
       "      <td>1140523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2090</th>\n",
       "      <td>95479</td>\n",
       "      <td>13400</td>\n",
       "      <td>2994</td>\n",
       "      <td>12654</td>\n",
       "      <td>89113</td>\n",
       "      <td>4752</td>\n",
       "      <td>28994</td>\n",
       "      <td>54546</td>\n",
       "      <td>3017</td>\n",
       "      <td>363</td>\n",
       "      <td>...</td>\n",
       "      <td>343</td>\n",
       "      <td>89324</td>\n",
       "      <td>1223</td>\n",
       "      <td>22471</td>\n",
       "      <td>283</td>\n",
       "      <td>12629</td>\n",
       "      <td>12022</td>\n",
       "      <td>84227</td>\n",
       "      <td>4402</td>\n",
       "      <td>1137658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2091</th>\n",
       "      <td>118877</td>\n",
       "      <td>24252</td>\n",
       "      <td>5823</td>\n",
       "      <td>14679</td>\n",
       "      <td>28196</td>\n",
       "      <td>3142</td>\n",
       "      <td>16392</td>\n",
       "      <td>22654</td>\n",
       "      <td>6180</td>\n",
       "      <td>1028</td>\n",
       "      <td>...</td>\n",
       "      <td>3904</td>\n",
       "      <td>12851</td>\n",
       "      <td>5298</td>\n",
       "      <td>6956</td>\n",
       "      <td>7123</td>\n",
       "      <td>28968</td>\n",
       "      <td>6802</td>\n",
       "      <td>13360</td>\n",
       "      <td>27178</td>\n",
       "      <td>307843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2092</th>\n",
       "      <td>119241</td>\n",
       "      <td>24449</td>\n",
       "      <td>5802</td>\n",
       "      <td>14695</td>\n",
       "      <td>28137</td>\n",
       "      <td>3168</td>\n",
       "      <td>16289</td>\n",
       "      <td>22562</td>\n",
       "      <td>6177</td>\n",
       "      <td>1040</td>\n",
       "      <td>...</td>\n",
       "      <td>3917</td>\n",
       "      <td>12845</td>\n",
       "      <td>5292</td>\n",
       "      <td>6932</td>\n",
       "      <td>7161</td>\n",
       "      <td>28917</td>\n",
       "      <td>6779</td>\n",
       "      <td>13373</td>\n",
       "      <td>27299</td>\n",
       "      <td>308182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2093 rows × 1024 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        0      1     2      3      4     5      6      7     8     9     ...  \\\n",
       "0      24858  19376   592   4982   8009  2129   3486  15243   655   247  ...   \n",
       "1      25176  19094   595   5324   8123  2192   3684  16480   699   271  ...   \n",
       "2      27050  21081   622   4958   8840  2668   3725  16372   714   282  ...   \n",
       "3      26854  20821   630   5192   8702  2497   3779  16640   653   261  ...   \n",
       "4      25124  18591   650   4735   8451  2303   3431  16051   703   222  ...   \n",
       "...      ...    ...   ...    ...    ...   ...    ...    ...   ...   ...  ...   \n",
       "2088  178821  32849  6689  11983  38008  5235  11725  13240  6916  1873  ...   \n",
       "2089   95603  13400  2963  12697  89420  4786  29025  54400  3017   359  ...   \n",
       "2090   95479  13400  2994  12654  89113  4752  28994  54546  3017   363  ...   \n",
       "2091  118877  24252  5823  14679  28196  3142  16392  22654  6180  1028  ...   \n",
       "2092  119241  24449  5802  14695  28137  3168  16289  22562  6177  1040  ...   \n",
       "\n",
       "      1014   1015  1016   1017  1018   1019   1020   1021   1022     1023  \n",
       "0      487  20342   713   5285   572   5288   6678  20373   6990   299298  \n",
       "1      527  20538   887   5613   665   5579   7089  20436   7570   262376  \n",
       "2      441  22485   617   5552   513   5161   7156  22299   6766   283445  \n",
       "3      484  22241   645   5674   571   5305   7397  21911   7033   275671  \n",
       "4      469  20992   869   5382   638   5461   6853  20883   7065   286160  \n",
       "...    ...    ...   ...    ...   ...    ...    ...    ...    ...      ...  \n",
       "2088  3732  12846  3201   5315  5885  31547   5721  12310  29437   315314  \n",
       "2089   334  89677  1216  22574   259  12417  11944  84611   4248  1140523  \n",
       "2090   343  89324  1223  22471   283  12629  12022  84227   4402  1137658  \n",
       "2091  3904  12851  5298   6956  7123  28968   6802  13360  27178   307843  \n",
       "2092  3917  12845  5292   6932  7161  28917   6779  13373  27299   308182  \n",
       "\n",
       "[2093 rows x 1024 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler_norm = MinMaxScaler()\n",
    "ndf2 = ndf.iloc[:, :] = scaler_norm.fit_transform(ndf.iloc[:, :].to_numpy())  # Normalising the values in dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.12848234, 0.19189716, 0.08124057, ..., 0.22200985, 0.22917008,\n",
       "        0.10335801],\n",
       "       [0.13015449, 0.18907618, 0.08165226, ..., 0.22269793, 0.24818835,\n",
       "        0.08762376],\n",
       "       [0.14000862, 0.20895313, 0.08535749, ..., 0.24304547, 0.2218251 ,\n",
       "        0.09660228],\n",
       "       ...,\n",
       "       [0.49983173, 0.13211624, 0.41086867, ..., 0.91941808, 0.14430928,\n",
       "        0.46062369],\n",
       "       [0.62286643, 0.24067424, 0.79909428, ..., 0.14541443, 0.89113683,\n",
       "        0.10699944],\n",
       "       [0.62478046, 0.24264493, 0.79621243, ..., 0.14555642, 0.89510444,\n",
       "        0.10714391]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf2 = np.delete(ndf2, 1, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2093, 1023)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf.drop(ndf.columns[[0]], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>1014</th>\n",
       "      <th>1015</th>\n",
       "      <th>1016</th>\n",
       "      <th>1017</th>\n",
       "      <th>1018</th>\n",
       "      <th>1019</th>\n",
       "      <th>1020</th>\n",
       "      <th>1021</th>\n",
       "      <th>1022</th>\n",
       "      <th>1023</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.191897</td>\n",
       "      <td>0.081241</td>\n",
       "      <td>0.166261</td>\n",
       "      <td>0.069572</td>\n",
       "      <td>0.331922</td>\n",
       "      <td>0.118676</td>\n",
       "      <td>0.207008</td>\n",
       "      <td>0.087851</td>\n",
       "      <td>0.108955</td>\n",
       "      <td>0.027513</td>\n",
       "      <td>...</td>\n",
       "      <td>0.106728</td>\n",
       "      <td>0.222809</td>\n",
       "      <td>0.134579</td>\n",
       "      <td>0.233746</td>\n",
       "      <td>0.079677</td>\n",
       "      <td>0.167570</td>\n",
       "      <td>0.366683</td>\n",
       "      <td>0.222010</td>\n",
       "      <td>0.229170</td>\n",
       "      <td>0.103358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.189076</td>\n",
       "      <td>0.081652</td>\n",
       "      <td>0.177676</td>\n",
       "      <td>0.070681</td>\n",
       "      <td>0.341804</td>\n",
       "      <td>0.125509</td>\n",
       "      <td>0.226221</td>\n",
       "      <td>0.093771</td>\n",
       "      <td>0.119541</td>\n",
       "      <td>0.026455</td>\n",
       "      <td>...</td>\n",
       "      <td>0.115494</td>\n",
       "      <td>0.224960</td>\n",
       "      <td>0.167422</td>\n",
       "      <td>0.248283</td>\n",
       "      <td>0.092631</td>\n",
       "      <td>0.176795</td>\n",
       "      <td>0.389264</td>\n",
       "      <td>0.222698</td>\n",
       "      <td>0.248188</td>\n",
       "      <td>0.087624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.208953</td>\n",
       "      <td>0.085357</td>\n",
       "      <td>0.165459</td>\n",
       "      <td>0.077654</td>\n",
       "      <td>0.416471</td>\n",
       "      <td>0.126924</td>\n",
       "      <td>0.224543</td>\n",
       "      <td>0.095789</td>\n",
       "      <td>0.124393</td>\n",
       "      <td>0.015873</td>\n",
       "      <td>...</td>\n",
       "      <td>0.096647</td>\n",
       "      <td>0.246331</td>\n",
       "      <td>0.116459</td>\n",
       "      <td>0.245579</td>\n",
       "      <td>0.071458</td>\n",
       "      <td>0.163544</td>\n",
       "      <td>0.392945</td>\n",
       "      <td>0.243045</td>\n",
       "      <td>0.221825</td>\n",
       "      <td>0.096602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.206352</td>\n",
       "      <td>0.086455</td>\n",
       "      <td>0.173270</td>\n",
       "      <td>0.076312</td>\n",
       "      <td>0.389647</td>\n",
       "      <td>0.128787</td>\n",
       "      <td>0.228706</td>\n",
       "      <td>0.087582</td>\n",
       "      <td>0.115130</td>\n",
       "      <td>0.023280</td>\n",
       "      <td>...</td>\n",
       "      <td>0.106071</td>\n",
       "      <td>0.243653</td>\n",
       "      <td>0.121744</td>\n",
       "      <td>0.250986</td>\n",
       "      <td>0.079538</td>\n",
       "      <td>0.168109</td>\n",
       "      <td>0.406186</td>\n",
       "      <td>0.238808</td>\n",
       "      <td>0.230580</td>\n",
       "      <td>0.093289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.184044</td>\n",
       "      <td>0.089200</td>\n",
       "      <td>0.158016</td>\n",
       "      <td>0.073871</td>\n",
       "      <td>0.359216</td>\n",
       "      <td>0.116778</td>\n",
       "      <td>0.219558</td>\n",
       "      <td>0.094309</td>\n",
       "      <td>0.097927</td>\n",
       "      <td>0.037037</td>\n",
       "      <td>...</td>\n",
       "      <td>0.102783</td>\n",
       "      <td>0.229943</td>\n",
       "      <td>0.164024</td>\n",
       "      <td>0.238045</td>\n",
       "      <td>0.088870</td>\n",
       "      <td>0.173054</td>\n",
       "      <td>0.376298</td>\n",
       "      <td>0.227580</td>\n",
       "      <td>0.231629</td>\n",
       "      <td>0.097759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2088</th>\n",
       "      <td>0.326674</td>\n",
       "      <td>0.917936</td>\n",
       "      <td>0.399947</td>\n",
       "      <td>0.361312</td>\n",
       "      <td>0.819137</td>\n",
       "      <td>0.402995</td>\n",
       "      <td>0.175898</td>\n",
       "      <td>0.930176</td>\n",
       "      <td>0.826202</td>\n",
       "      <td>0.798942</td>\n",
       "      <td>...</td>\n",
       "      <td>0.817883</td>\n",
       "      <td>0.140530</td>\n",
       "      <td>0.604190</td>\n",
       "      <td>0.235075</td>\n",
       "      <td>0.819752</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.314104</td>\n",
       "      <td>0.133946</td>\n",
       "      <td>0.965210</td>\n",
       "      <td>0.110183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2089</th>\n",
       "      <td>0.132116</td>\n",
       "      <td>0.406615</td>\n",
       "      <td>0.423779</td>\n",
       "      <td>0.861293</td>\n",
       "      <td>0.748706</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.815187</td>\n",
       "      <td>0.405624</td>\n",
       "      <td>0.158359</td>\n",
       "      <td>0.110053</td>\n",
       "      <td>...</td>\n",
       "      <td>0.073197</td>\n",
       "      <td>0.983854</td>\n",
       "      <td>0.229521</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.036077</td>\n",
       "      <td>0.393565</td>\n",
       "      <td>0.656008</td>\n",
       "      <td>0.923612</td>\n",
       "      <td>0.139260</td>\n",
       "      <td>0.461845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2090</th>\n",
       "      <td>0.132116</td>\n",
       "      <td>0.410869</td>\n",
       "      <td>0.422344</td>\n",
       "      <td>0.858307</td>\n",
       "      <td>0.743373</td>\n",
       "      <td>0.998930</td>\n",
       "      <td>0.817455</td>\n",
       "      <td>0.405624</td>\n",
       "      <td>0.160124</td>\n",
       "      <td>0.105820</td>\n",
       "      <td>...</td>\n",
       "      <td>0.075170</td>\n",
       "      <td>0.979979</td>\n",
       "      <td>0.230842</td>\n",
       "      <td>0.995435</td>\n",
       "      <td>0.039421</td>\n",
       "      <td>0.400285</td>\n",
       "      <td>0.660293</td>\n",
       "      <td>0.919418</td>\n",
       "      <td>0.144309</td>\n",
       "      <td>0.460624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2091</th>\n",
       "      <td>0.240674</td>\n",
       "      <td>0.799094</td>\n",
       "      <td>0.489936</td>\n",
       "      <td>0.265891</td>\n",
       "      <td>0.490824</td>\n",
       "      <td>0.564049</td>\n",
       "      <td>0.322114</td>\n",
       "      <td>0.831158</td>\n",
       "      <td>0.453463</td>\n",
       "      <td>0.630688</td>\n",
       "      <td>...</td>\n",
       "      <td>0.855577</td>\n",
       "      <td>0.140585</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.307805</td>\n",
       "      <td>0.992199</td>\n",
       "      <td>0.918244</td>\n",
       "      <td>0.373496</td>\n",
       "      <td>0.145414</td>\n",
       "      <td>0.891137</td>\n",
       "      <td>0.106999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2092</th>\n",
       "      <td>0.242645</td>\n",
       "      <td>0.796212</td>\n",
       "      <td>0.490470</td>\n",
       "      <td>0.265317</td>\n",
       "      <td>0.494902</td>\n",
       "      <td>0.560494</td>\n",
       "      <td>0.320685</td>\n",
       "      <td>0.830755</td>\n",
       "      <td>0.458756</td>\n",
       "      <td>0.632804</td>\n",
       "      <td>...</td>\n",
       "      <td>0.858426</td>\n",
       "      <td>0.140519</td>\n",
       "      <td>0.998867</td>\n",
       "      <td>0.306741</td>\n",
       "      <td>0.997493</td>\n",
       "      <td>0.916627</td>\n",
       "      <td>0.372232</td>\n",
       "      <td>0.145556</td>\n",
       "      <td>0.895104</td>\n",
       "      <td>0.107144</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2093 rows × 1023 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          1         2         3         4         5         6         7     \\\n",
       "0     0.191897  0.081241  0.166261  0.069572  0.331922  0.118676  0.207008   \n",
       "1     0.189076  0.081652  0.177676  0.070681  0.341804  0.125509  0.226221   \n",
       "2     0.208953  0.085357  0.165459  0.077654  0.416471  0.126924  0.224543   \n",
       "3     0.206352  0.086455  0.173270  0.076312  0.389647  0.128787  0.228706   \n",
       "4     0.184044  0.089200  0.158016  0.073871  0.359216  0.116778  0.219558   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "2088  0.326674  0.917936  0.399947  0.361312  0.819137  0.402995  0.175898   \n",
       "2089  0.132116  0.406615  0.423779  0.861293  0.748706  1.000000  0.815187   \n",
       "2090  0.132116  0.410869  0.422344  0.858307  0.743373  0.998930  0.817455   \n",
       "2091  0.240674  0.799094  0.489936  0.265891  0.490824  0.564049  0.322114   \n",
       "2092  0.242645  0.796212  0.490470  0.265317  0.494902  0.560494  0.320685   \n",
       "\n",
       "          8         9         10    ...      1014      1015      1016  \\\n",
       "0     0.087851  0.108955  0.027513  ...  0.106728  0.222809  0.134579   \n",
       "1     0.093771  0.119541  0.026455  ...  0.115494  0.224960  0.167422   \n",
       "2     0.095789  0.124393  0.015873  ...  0.096647  0.246331  0.116459   \n",
       "3     0.087582  0.115130  0.023280  ...  0.106071  0.243653  0.121744   \n",
       "4     0.094309  0.097927  0.037037  ...  0.102783  0.229943  0.164024   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "2088  0.930176  0.826202  0.798942  ...  0.817883  0.140530  0.604190   \n",
       "2089  0.405624  0.158359  0.110053  ...  0.073197  0.983854  0.229521   \n",
       "2090  0.405624  0.160124  0.105820  ...  0.075170  0.979979  0.230842   \n",
       "2091  0.831158  0.453463  0.630688  ...  0.855577  0.140585  1.000000   \n",
       "2092  0.830755  0.458756  0.632804  ...  0.858426  0.140519  0.998867   \n",
       "\n",
       "          1017      1018      1019      1020      1021      1022      1023  \n",
       "0     0.233746  0.079677  0.167570  0.366683  0.222010  0.229170  0.103358  \n",
       "1     0.248283  0.092631  0.176795  0.389264  0.222698  0.248188  0.087624  \n",
       "2     0.245579  0.071458  0.163544  0.392945  0.243045  0.221825  0.096602  \n",
       "3     0.250986  0.079538  0.168109  0.406186  0.238808  0.230580  0.093289  \n",
       "4     0.238045  0.088870  0.173054  0.376298  0.227580  0.231629  0.097759  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "2088  0.235075  0.819752  1.000000  0.314104  0.133946  0.965210  0.110183  \n",
       "2089  1.000000  0.036077  0.393565  0.656008  0.923612  0.139260  0.461845  \n",
       "2090  0.995435  0.039421  0.400285  0.660293  0.919418  0.144309  0.460624  \n",
       "2091  0.307805  0.992199  0.918244  0.373496  0.145414  0.891137  0.106999  \n",
       "2092  0.306741  0.997493  0.916627  0.372232  0.145556  0.895104  0.107144  \n",
       "\n",
       "[2093 rows x 1023 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import numpy\n",
    "numpy.set_printoptions(threshold=sys.maxsize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_SVC.predict(ndf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_SVC.predict(ndf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_model.predict(ndf2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_model.predict(ndf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "39c8acf6cf0edf9c3a8397569b7cf342fd28a81b299993de1e8e4c8acda5417d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
